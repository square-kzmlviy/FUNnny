
SHT31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000704  00000798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080011c  0080011c  000007b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf6  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a4  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042c  00000000  00000000  000029b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
  9e:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_24>:



/* 割込み TWI割込み */
ISR(TWI_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	7f 92       	push	r7
  b2:	8f 92       	push	r8
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2f 97       	sbiw	r28, 0x0f	; 15
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61
	/***************************************************************************/
	/***************************************************************************/

	/* LCD初期化データ */
	char i2c_init[] = {0x38,0x39,0x14,0x70,0x52,0x6c,0x38,0x0c,0x01};
  ec:	89 e0       	ldi	r24, 0x09	; 9
  ee:	e4 e0       	ldi	r30, 0x04	; 4
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_24+0x50>

	/* LCD表示データ */
	char input_data[] = {0b10000000,(0x40|0b10000000),0b01000000,'0','0','0'};
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	ed e0       	ldi	r30, 0x0D	; 13
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	de 01       	movw	r26, r28
 106:	1a 96       	adiw	r26, 0x0a	; 10
 108:	01 90       	ld	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	8a 95       	dec	r24
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_24+0x62>



	/***************************************************************************/
	/***************************************************************************/
	convert_to_binary_number_serialconnect(progress,in_data,'p');
 110:	40 e7       	ldi	r20, 0x70	; 112
 112:	68 e2       	ldi	r22, 0x28	; 40
 114:	71 e0       	ldi	r23, 0x01	; 1
 116:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <progress>
 11a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
	convert_to_binary_number_serialconnect(TWSR,in_data,'s');
 11e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 122:	43 e7       	ldi	r20, 0x73	; 115
 124:	68 e2       	ldi	r22, 0x28	; 40
 126:	71 e0       	ldi	r23, 0x01	; 1
 128:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
	/* main同期 */
	if(main_flg == 1)
 12c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	09 f0       	breq	.+2      	; 0x136 <__vector_24+0x90>
 134:	b5 c1       	rjmp	.+874    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	{
		/* ステータスレジスタ分岐 上位5bitの確認*/
		
		switch(TWSR & 0xF8)
 136:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 13a:	88 7f       	andi	r24, 0xF8	; 248
 13c:	88 31       	cpi	r24, 0x18	; 24
 13e:	71 f1       	breq	.+92     	; 0x19c <__vector_24+0xf6>
 140:	80 34       	cpi	r24, 0x40	; 64
 142:	09 f4       	brne	.+2      	; 0x146 <__vector_24+0xa0>
 144:	16 c1       	rjmp	.+556    	; 0x372 <__vector_24+0x2cc>
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	09 f0       	breq	.+2      	; 0x14c <__vector_24+0xa6>
 14a:	aa c1       	rjmp	.+852    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		{
			/* 開始条件送信 */
			case 0x08:
			
				convert_to_binary_number_serialconnect(progress,in_data,'8');
 14c:	48 e3       	ldi	r20, 0x38	; 56
 14e:	68 e2       	ldi	r22, 0x28	; 40
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <progress>
 156:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				/* LCD初期化前 か　LCD初期化済 */
				if((progress == 0) || (progress == 1) )
 15a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <progress>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	50 f4       	brcc	.+20     	; 0x176 <__vector_24+0xd0>
				{
					/* SLA+W AQM0802のアドレス */
					TWDR = 0x7C;
 162:	8c e7       	ldi	r24, 0x7C	; 124
 164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					/* フラグ落とし 送信TWINT TWEN TWIE*/
					TWCR = 0b10000101;
 168:	85 e8       	ldi	r24, 0x85	; 133
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					/* ACK待ち割込み立ち上がりでとる */
					flg_lcd = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <flg_lcd>
 174:	95 c1       	rjmp	.+810    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				}

				/* SHT通信アドレス送信前 */
				else if(progress == 3)
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	39 f4       	brne	.+14     	; 0x188 <__vector_24+0xe2>
				{
					/* SLA+W AQM0802のアドレス W指定*/
					TWDR = 0b10001000;
 17a:	88 e8       	ldi	r24, 0x88	; 136
 17c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					TWCR = 0b10000101;
 180:	85 e8       	ldi	r24, 0x85	; 133
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 186:	8c c1       	rjmp	.+792    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>

					/* ACK待ち割込み立ち上がりでとる */
				}

				/* SHT通信アドレス送信後（センサ値受信前） */
				else if(progress == 4)
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	09 f0       	breq	.+2      	; 0x18e <__vector_24+0xe8>
 18c:	89 c1       	rjmp	.+786    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				{
					/* SLA+W AQM0802のアドレス r指定*/
					TWDR = 0b10001001;
 18e:	89 e8       	ldi	r24, 0x89	; 137
 190:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					TWCR = 0b10000101;
 194:	85 e8       	ldi	r24, 0x85	; 133
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 19a:	82 c1       	rjmp	.+772    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>

			/* 開始条件送信 */
			case 0x18:

			/* LCD初期化前 */
			if(progress==0)
 19c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <progress>
 1a0:	81 11       	cpse	r24, r1
 1a2:	43 c0       	rjmp	.+134    	; 0x22a <__vector_24+0x184>
 1a4:	ce 01       	movw	r24, r28
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	4c 01       	movw	r8, r24
 1aa:	5e 01       	movw	r10, r28
 1ac:	9a e0       	ldi	r25, 0x0A	; 10
 1ae:	a9 0e       	add	r10, r25
 1b0:	b1 1c       	adc	r11, r1
			{
				while(init != 9)
				{
					convert_to_binary_number_serialconnect(TWSR,in_data,'I');
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f9 eb       	ldi	r31, 0xB9	; 185
 1b6:	cf 2e       	mov	r12, r31
 1b8:	d1 2c       	mov	r13, r1
 1ba:	f0 2d       	mov	r31, r0
					/* 初期化データの格納 */
					TWDR =  i2c_init[init];
 1bc:	0f 2e       	mov	r0, r31
 1be:	fb eb       	ldi	r31, 0xBB	; 187
 1c0:	ef 2e       	mov	r14, r31
 1c2:	f1 2c       	mov	r15, r1
 1c4:	f0 2d       	mov	r31, r0
					TWCR = 0b10000101;
 1c6:	0c eb       	ldi	r16, 0xBC	; 188
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	0f 2e       	mov	r0, r31
 1cc:	f5 e8       	ldi	r31, 0x85	; 133
 1ce:	7f 2e       	mov	r7, r31
 1d0:	f0 2d       	mov	r31, r0
			/* LCD初期化前 */
			if(progress==0)
			{
				while(init != 9)
				{
					convert_to_binary_number_serialconnect(TWSR,in_data,'I');
 1d2:	d6 01       	movw	r26, r12
 1d4:	8c 91       	ld	r24, X
 1d6:	49 e4       	ldi	r20, 0x49	; 73
 1d8:	68 e2       	ldi	r22, 0x28	; 40
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
 1e0:	f4 01       	movw	r30, r8
					/* 初期化データの格納 */
					TWDR =  i2c_init[init];
 1e2:	80 81       	ld	r24, Z
 1e4:	d7 01       	movw	r26, r14
 1e6:	8c 93       	st	X, r24
					TWCR = 0b10000101;
 1e8:	d8 01       	movw	r26, r16
 1ea:	7c 92       	st	X, r7
					/* ACK応答待ち */
					while(!(TWCR & 0b10000000)	);
 1ec:	d8 01       	movw	r26, r16
 1ee:	8c 91       	ld	r24, X
 1f0:	88 23       	and	r24, r24
 1f2:	e4 f7       	brge	.-8      	; 0x1ec <__vector_24+0x146>
 1f4:	bf ef       	ldi	r27, 0xFF	; 255
 1f6:	8b 1a       	sub	r8, r27
 1f8:	9b 0a       	sbc	r9, r27

					/* 仕様書指定0x52後のディレイ */
					if(i2c_init[init] == 0x52)_delay_ms(200);
 1fa:	80 81       	ld	r24, Z
 1fc:	82 35       	cpi	r24, 0x52	; 82
 1fe:	31 f4       	brne	.+12     	; 0x20c <__vector_24+0x166>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	ef e4       	ldi	r30, 0x4F	; 79
 202:	f3 ec       	ldi	r31, 0xC3	; 195
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <__vector_24+0x15e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <__vector_24+0x164>
 20a:	00 00       	nop
			case 0x18:

			/* LCD初期化前 */
			if(progress==0)
			{
				while(init != 9)
 20c:	8a 14       	cp	r8, r10
 20e:	9b 04       	cpc	r9, r11
 210:	01 f7       	brne	.-64     	; 0x1d2 <__vector_24+0x12c>
					init++;
				}
				init = 0;

				/* 次の操作へ　→lcd初期化済み */
				progress = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <progress>

				/* TWI通信終了　TWINT TWSTO TWEN TWIE  */
				TWCR = 0b10010101;
 218:	85 e9       	ldi	r24, 0x95	; 149
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				/* STOが立つまで待つ */
				while(!(TWCR & (1<<TWSTO))	);
 21e:	ec eb       	ldi	r30, 0xBC	; 188
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	84 ff       	sbrs	r24, 4
 226:	fd cf       	rjmp	.-6      	; 0x222 <__vector_24+0x17c>
 228:	3b c1       	rjmp	.+630    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>

			}

			/* LCD初期化済　かつ　アドレス送信済み　 */
			else if(progress==1 && flg_lcd == 1)
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_24+0x18a>
 22e:	7a c0       	rjmp	.+244    	; 0x324 <__vector_24+0x27e>
 230:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <flg_lcd>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	09 f0       	breq	.+2      	; 0x23a <__vector_24+0x194>
 238:	33 c1       	rjmp	.+614    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			{
				convert_to_binary_number_serialconnect(progress,in_data,'S');
 23a:	43 e5       	ldi	r20, 0x53	; 83
 23c:	68 e2       	ldi	r22, 0x28	; 40
 23e:	71 e0       	ldi	r23, 0x01	; 1
 240:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
 244:	5e 01       	movw	r10, r28
 246:	fa e0       	ldi	r31, 0x0A	; 10
 248:	af 0e       	add	r10, r31
 24a:	b1 1c       	adc	r11, r1

	/* LCD表示データ */
	char input_data[] = {0b10000000,(0x40|0b10000000),0b01000000,'0','0','0'};

	/* LCD表示データ＿カウント */
	char init = 0;
 24c:	f1 2c       	mov	r15, r1
					}

					/* 上記以外の桁 */
					else
					{
						TWDR = input_data[init];
 24e:	0f 2e       	mov	r0, r31
 250:	fb eb       	ldi	r31, 0xBB	; 187
 252:	cf 2e       	mov	r12, r31
 254:	d1 2c       	mov	r13, r1
 256:	f0 2d       	mov	r31, r0
					}

					/* 3桁目 */
					else if(init==5)
					{
						TWDR = input_data[init]+(d_T%10);
 258:	0f 2e       	mov	r0, r31
 25a:	fa e0       	ldi	r31, 0x0A	; 10
 25c:	8f 2e       	mov	r8, r31
 25e:	f0 2d       	mov	r31, r0
					//convert_to_binary_number_serialconnect(TWSR,in_data,'O');
					/* 3桁目 */
					if(init==3)
					{
						/* 3桁目表示 */
						TWDR = input_data[init]+(d_T/100);
 260:	0f 2e       	mov	r0, r31
 262:	f4 e6       	ldi	r31, 0x64	; 100
 264:	ef 2e       	mov	r14, r31
 266:	f0 2d       	mov	r31, r0
					else
					{
						TWDR = input_data[init];
						
					}
					TWCR = 0b10000101;
 268:	0c eb       	ldi	r16, 0xBC	; 188
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	0f 2e       	mov	r0, r31
 26e:	f5 e8       	ldi	r31, 0x85	; 133
 270:	9f 2e       	mov	r9, r31
 272:	f0 2d       	mov	r31, r0

				while(init != 6)
				{
					//convert_to_binary_number_serialconnect(TWSR,in_data,'O');
					/* 3桁目 */
					if(init==3)
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	f8 12       	cpse	r15, r24
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <__vector_24+0x1fc>
					{
						/* 3桁目表示 */
						TWDR = input_data[init]+(d_T/100);
 27a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <d_T>
 27e:	6e 2d       	mov	r22, r14
 280:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__udivmodqi4>
 284:	9d 85       	ldd	r25, Y+13	; 0x0d
 286:	89 0f       	add	r24, r25
 288:	d6 01       	movw	r26, r12
 28a:	8c 93       	st	X, r24
						b = d_T/100;
 28c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <d_T>
						d_T = d_T - (b*100);
 290:	82 2f       	mov	r24, r18
 292:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__udivmodqi4>
 296:	8e 9d       	mul	r24, r14
 298:	20 19       	sub	r18, r0
 29a:	11 24       	eor	r1, r1
 29c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <d_T>
 2a0:	1e c0       	rjmp	.+60     	; 0x2de <__vector_24+0x238>
					}

					/* 2桁目 */
					else if(init==4)
 2a2:	b4 e0       	ldi	r27, 0x04	; 4
 2a4:	fb 12       	cpse	r15, r27
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <__vector_24+0x216>
					{
						TWDR = input_data[init]+(d_T/10);
 2a8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <d_T>
 2ac:	68 2d       	mov	r22, r8
 2ae:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__udivmodqi4>
 2b2:	9e 85       	ldd	r25, Y+14	; 0x0e
 2b4:	89 0f       	add	r24, r25
 2b6:	f6 01       	movw	r30, r12
 2b8:	80 83       	st	Z, r24
 2ba:	11 c0       	rjmp	.+34     	; 0x2de <__vector_24+0x238>
					}

					/* 3桁目 */
					else if(init==5)
 2bc:	f5 e0       	ldi	r31, 0x05	; 5
 2be:	ff 12       	cpse	r15, r31
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <__vector_24+0x230>
					{
						TWDR = input_data[init]+(d_T%10);
 2c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <d_T>
 2c6:	68 2d       	mov	r22, r8
 2c8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__udivmodqi4>
 2cc:	8f 85       	ldd	r24, Y+15	; 0x0f
 2ce:	89 0f       	add	r24, r25
 2d0:	d6 01       	movw	r26, r12
 2d2:	8c 93       	st	X, r24
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <__vector_24+0x238>
					}

					/* 上記以外の桁 */
					else
					{
						TWDR = input_data[init];
 2d6:	f5 01       	movw	r30, r10
 2d8:	80 81       	ld	r24, Z
 2da:	d6 01       	movw	r26, r12
 2dc:	8c 93       	st	X, r24
						
					}
					TWCR = 0b10000101;
 2de:	f8 01       	movw	r30, r16
 2e0:	90 82       	st	Z, r9
					while(!(TWCR & 0b10000000)	);
 2e2:	d8 01       	movw	r26, r16
 2e4:	8c 91       	ld	r24, X
 2e6:	88 23       	and	r24, r24
 2e8:	e4 f7       	brge	.-8      	; 0x2e2 <__vector_24+0x23c>
					convert_to_binary_number_serialconnect(progress,in_data,TWDR);
 2ea:	f6 01       	movw	r30, r12
 2ec:	40 81       	ld	r20, Z
 2ee:	68 e2       	ldi	r22, 0x28	; 40
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <progress>
 2f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
					init++;
 2fa:	f3 94       	inc	r15
 2fc:	ff ef       	ldi	r31, 0xFF	; 255
 2fe:	af 1a       	sub	r10, r31
 300:	bf 0a       	sbc	r11, r31
				//0b01000000,表示データRS=1
				//'0',文字型0+ 整数型変数で表示
				//'0',文字型0+ 整数型変数で表示
				//'0',文字型0+ 整数型変数で表示

				while(init != 6)
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	f8 12       	cpse	r15, r24
 306:	b6 cf       	rjmp	.-148    	; 0x274 <__vector_24+0x1ce>
				}
				
				init = 0;

				/* 次の操作へ　→SHT	コマンド送信前 */
				progress = 3;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <progress>
				ISR_cnt = 0;
 30e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ISR_cnt>

				/* 通信終了 */
				TWCR = 0b10010101;
 312:	85 e9       	ldi	r24, 0x95	; 149
 314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				/* STOが立つまで待つ */
				while(!(TWCR & (1<<TWSTO))	);
 318:	ec eb       	ldi	r30, 0xBC	; 188
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	84 ff       	sbrs	r24, 4
 320:	fd cf       	rjmp	.-6      	; 0x31c <__vector_24+0x276>
 322:	be c0       	rjmp	.+380    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			}

			/* SHT	コマンド送信前 */
			else if(progress==3)
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	09 f0       	breq	.+2      	; 0x32a <__vector_24+0x284>
 328:	bb c0       	rjmp	.+374    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			{
				/* コマンドコード送信 */

				/* クロスストレッチ有効 */
				TWDR = 0x2c;
 32a:	8c e2       	ldi	r24, 0x2C	; 44
 32c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = 0b10000101;
 330:	85 e8       	ldi	r24, 0x85	; 133
 332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				while(!(TWCR & 0b10000000)	);
 336:	ec eb       	ldi	r30, 0xBC	; 188
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	ec f7       	brge	.-6      	; 0x33a <__vector_24+0x294>

				/* 繰り返しレベル中 */
				TWDR = 0x0d;
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = 0b10000101;
 346:	85 e8       	ldi	r24, 0x85	; 133
 348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				while(!(TWCR & 0b10000000)	);
 34c:	ec eb       	ldi	r30, 0xBC	; 188
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	88 23       	and	r24, r24
 354:	ec f7       	brge	.-6      	; 0x350 <__vector_24+0x2aa>

				/* *************** */

				/* 次の操作へ　→コマンド送信済み*/
				ISR_cnt = 0;
 356:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ISR_cnt>
				progress = 4;
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <progress>

				/* 通信終了 */
				TWCR = 0b10010101;
 360:	85 e9       	ldi	r24, 0x95	; 149
 362:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				/* STOが立つまで待つ */
				while(!(TWCR & (1<<TWSTO))	);
 366:	ec eb       	ldi	r30, 0xBC	; 188
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	84 ff       	sbrs	r24, 4
 36e:	fd cf       	rjmp	.-6      	; 0x36a <__vector_24+0x2c4>
 370:	97 c0       	rjmp	.+302    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				/* クロスストレッチ */

				/* 温度データ受信　MSB,LSB,CRC */

				/* MSB受信待ち（ACKなし） */
				while(!(TWCR & 0b10000000)	);
 372:	ec eb       	ldi	r30, 0xBC	; 188
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	88 23       	and	r24, r24
 37a:	ec f7       	brge	.-6      	; 0x376 <__vector_24+0x2d0>
				convert_to_binary_number_serialconnect(TWDR,in_data,'$');
 37c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 380:	44 e2       	ldi	r20, 0x24	; 36
 382:	68 e2       	ldi	r22, 0x28	; 40
 384:	71 e0       	ldi	r23, 0x01	; 1
 386:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				/* ACK応答 */
				TWCR = 0b11000101;
 38a:	85 ec       	ldi	r24, 0xC5	; 197
 38c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

				/* LSB受信待ち */
				while(!(TWCR & 0b10000000)	);
 390:	ec eb       	ldi	r30, 0xBC	; 188
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	88 23       	and	r24, r24
 398:	ec f7       	brge	.-6      	; 0x394 <__vector_24+0x2ee>
				convert_to_binary_number_serialconnect(TWDR,in_data,'+');
 39a:	0b eb       	ldi	r16, 0xBB	; 187
 39c:	10 e0       	ldi	r17, 0x00	; 0
 39e:	d8 01       	movw	r26, r16
 3a0:	8c 91       	ld	r24, X
 3a2:	4b e2       	ldi	r20, 0x2B	; 43
 3a4:	68 e2       	ldi	r22, 0x28	; 40
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				St_MSB = TWDR;
 3ac:	f8 01       	movw	r30, r16
 3ae:	80 81       	ld	r24, Z
 3b0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <St_MSB>
				
				/* ACK応答 */
				TWCR = 0b11000101;
 3b4:	85 ec       	ldi	r24, 0xC5	; 197
 3b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

				/* CRC受信待ち（ACKなし） */
				while(!(TWCR & 0b10000000)	);
 3ba:	ec eb       	ldi	r30, 0xBC	; 188
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	88 23       	and	r24, r24
 3c2:	ec f7       	brge	.-6      	; 0x3be <__vector_24+0x318>
				convert_to_binary_number_serialconnect(TWDR,in_data,'-');
 3c4:	0b eb       	ldi	r16, 0xBB	; 187
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	d8 01       	movw	r26, r16
 3ca:	8c 91       	ld	r24, X
 3cc:	4d e2       	ldi	r20, 0x2D	; 45
 3ce:	68 e2       	ldi	r22, 0x28	; 40
 3d0:	71 e0       	ldi	r23, 0x01	; 1
 3d2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				St_LSB = TWDR;
 3d6:	f8 01       	movw	r30, r16
 3d8:	80 81       	ld	r24, Z
 3da:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <St_LSB>
				
				/* ACK応答 */
				TWCR = 0b11000101;
 3de:	85 ec       	ldi	r24, 0xC5	; 197
 3e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

				/* ************************** */
				
				
				
				buff = (St_MSB*256+St_LSB);
 3e4:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <St_MSB>
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	fe 2f       	mov	r31, r30
 3ec:	ee 27       	eor	r30, r30
 3ee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <St_LSB>
 3f2:	e8 0f       	add	r30, r24
 3f4:	f1 1d       	adc	r31, r1
 3f6:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <buff+0x1>
 3fa:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <buff>
				d_T = -45 + ((175 * (buff*Bias)) >> 16);
 3fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Bias>
 402:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <Bias+0x1>
 406:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Bias+0x2>
 40a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <Bias+0x3>
 40e:	af ea       	ldi	r26, 0xAF	; 175
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__muluhisi3>
 416:	9b 01       	movw	r18, r22
 418:	ac 01       	movw	r20, r24
 41a:	df 01       	movw	r26, r30
 41c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulshisi3>
 420:	8d 52       	subi	r24, 0x2D	; 45
 422:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <d_T>
				convert_to_binary_number_serialconnect(d_T,in_data,'<');
 426:	4c e3       	ldi	r20, 0x3C	; 60
 428:	68 e2       	ldi	r22, 0x28	; 40
 42a:	71 e0       	ldi	r23, 0x01	; 1
 42c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				

				/* 湿度データ受信　MSB,LSB,CRC */

				/* MSB受信待ち（ACKなし） */
				while(!(TWCR & 0b10000000)	);
 430:	ec eb       	ldi	r30, 0xBC	; 188
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	88 23       	and	r24, r24
 438:	ec f7       	brge	.-6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				/* ACK応答 */
				convert_to_binary_number_serialconnect(d_T,in_data,'=');
 43a:	4d e3       	ldi	r20, 0x3D	; 61
 43c:	68 e2       	ldi	r22, 0x28	; 40
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <d_T>
 444:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				TWCR = 0b11000101;
 448:	85 ec       	ldi	r24, 0xC5	; 197
 44a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

				/* LSB受信待ち */
				while(!(TWCR & 0b10000000)	);
 44e:	ec eb       	ldi	r30, 0xBC	; 188
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	88 23       	and	r24, r24
 456:	ec f7       	brge	.-6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				convert_to_binary_number_serialconnect(d_T,in_data,'/');
 458:	4f e2       	ldi	r20, 0x2F	; 47
 45a:	68 e2       	ldi	r22, 0x28	; 40
 45c:	71 e0       	ldi	r23, 0x01	; 1
 45e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <d_T>
 462:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
				/* ACK応答 */
				TWCR = 0b11000101;
 466:	85 ec       	ldi	r24, 0xC5	; 197
 468:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

				/* CRC受信待ち（ACKなし） */
				while(!(TWCR & 0b10000000)	);
 46c:	ec eb       	ldi	r30, 0xBC	; 188
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	88 23       	and	r24, r24
 474:	ec f7       	brge	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				/* ACK応答 */
				TWCR = 0b10000101;//nack応答
 476:	85 e8       	ldi	r24, 0x85	; 133
 478:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				while(!(TWCR & 0b10000000)	);
 47c:	ec eb       	ldi	r30, 0xBC	; 188
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	88 23       	and	r24, r24
 484:	ec f7       	brge	.-6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>

				/* 次の操作へ　→LCD初期化済み（LCD再描画） */
				

				/* 通信終了 */
				TWCR = 0b10010101;
 486:	85 e9       	ldi	r24, 0x95	; 149
 488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				/* STOが立つまで待つ */
				while(!(TWCR & (1<<TWSTO))	);
 48c:	ec eb       	ldi	r30, 0xBC	; 188
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	84 ff       	sbrs	r24, 4
 494:	fd cf       	rjmp	.-6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				
				ISR_cnt = 0;
 496:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ISR_cnt>
				progress = 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <progress>

		}

	}

	main_flg = 0;
 4a0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>

}
 4a4:	2f 96       	adiw	r28, 0x0f	; 15
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	df 90       	pop	r13
 4d6:	cf 90       	pop	r12
 4d8:	bf 90       	pop	r11
 4da:	af 90       	pop	r10
 4dc:	9f 90       	pop	r9
 4de:	8f 90       	pop	r8
 4e0:	7f 90       	pop	r7
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <main>:


int main(void)
{
	
	DDRB  = 0b00000000;//
 4ec:	14 b8       	out	0x04, r1	; 4
	PORTB = 0B00000010;//	PB1 PUR_ON
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	85 b9       	out	0x05, r24	; 5
	
	TWBR  = 0b11111111;//SCL 周波数
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR  = 0b00000000;//1.9kHz
 4f8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	
	UCSR0A = 0b00000000;
 4fc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b00011000;
 500:	88 e1       	ldi	r24, 0x18	; 24
 502:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b00000110;
 506:	86 e0       	ldi	r24, 0x06	; 6
 508:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 25;
 50c:	89 e1       	ldi	r24, 0x19	; 25
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 514:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	int buf1;
	char Data_name=' ';
	char flag = 0;
	
	sei();
 518:	78 94       	sei
	/* mainを通過 */
	main_flg = 1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>

	/* 通信開始 TWINT TWSTA TWEN TWIE*/
	TWCR = 0b10100101;//フラグ下げ　開始　twi有効
 520:	85 ea       	ldi	r24, 0xA5	; 165
 522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & 0b10000000)	);
 526:	ec eb       	ldi	r30, 0xBC	; 188
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	88 23       	and	r24, r24
 52e:	ec f7       	brge	.-6      	; 0x52a <main+0x3e>
	
	while (1){
		/* mainを通過 */
		main_flg = 1;
 530:	c1 e0       	ldi	r28, 0x01	; 1
			
		}
		
		else if(progress == 4 && ISR_cnt == 0){
			convert_to_binary_number_serialconnect(progress,in_data,'P');
			TWCR = 0b10100101;//フラグ下げ　開始 測定値受信
 532:	0c eb       	ldi	r16, 0xBC	; 188
 534:	10 e0       	ldi	r17, 0x00	; 0
 536:	d5 ea       	ldi	r29, 0xA5	; 165
	TWCR = 0b10100101;//フラグ下げ　開始　twi有効
	while(!(TWCR & 0b10000000)	);
	
	while (1){
		/* mainを通過 */
		main_flg = 1;
 538:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <__data_end>
		
		if(progress == 1 && ISR_cnt == 0){
 53c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <progress>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	79 f4       	brne	.+30     	; 0x562 <main+0x76>
 544:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ISR_cnt>
 548:	81 11       	cpse	r24, r1
 54a:	f6 cf       	rjmp	.-20     	; 0x538 <main+0x4c>
			convert_to_binary_number_serialconnect(progress,in_data,'P');
 54c:	40 e5       	ldi	r20, 0x50	; 80
 54e:	68 e2       	ldi	r22, 0x28	; 40
 550:	71 e0       	ldi	r23, 0x01	; 1
 552:	8c 2f       	mov	r24, r28
 554:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
			TWCR = 0b10100101;//フラグ下げ　開始　twi有効
 558:	f8 01       	movw	r30, r16
 55a:	d0 83       	st	Z, r29
			ISR_cnt = 1;
 55c:	c0 93 1d 01 	sts	0x011D, r28	; 0x80011d <ISR_cnt>
 560:	eb cf       	rjmp	.-42     	; 0x538 <main+0x4c>
			
		}
		
		else if(progress == 3 && ISR_cnt == 0){
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	79 f4       	brne	.+30     	; 0x584 <main+0x98>
 566:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ISR_cnt>
 56a:	81 11       	cpse	r24, r1
 56c:	e5 cf       	rjmp	.-54     	; 0x538 <main+0x4c>
			convert_to_binary_number_serialconnect(progress,in_data,'P');
 56e:	40 e5       	ldi	r20, 0x50	; 80
 570:	68 e2       	ldi	r22, 0x28	; 40
 572:	71 e0       	ldi	r23, 0x01	; 1
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
			TWCR = 0b10100101;//フラグ下げ　開始　twi有効　MSB_0x2C LSB_0x0D
 57a:	f8 01       	movw	r30, r16
 57c:	d0 83       	st	Z, r29
			ISR_cnt = 1;
 57e:	c0 93 1d 01 	sts	0x011D, r28	; 0x80011d <ISR_cnt>
 582:	da cf       	rjmp	.-76     	; 0x538 <main+0x4c>
			
		}
		
		else if(progress == 4 && ISR_cnt == 0){
 584:	84 30       	cpi	r24, 0x04	; 4
 586:	c1 f6       	brne	.-80     	; 0x538 <main+0x4c>
 588:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ISR_cnt>
 58c:	81 11       	cpse	r24, r1
 58e:	d4 cf       	rjmp	.-88     	; 0x538 <main+0x4c>
			convert_to_binary_number_serialconnect(progress,in_data,'P');
 590:	40 e5       	ldi	r20, 0x50	; 80
 592:	68 e2       	ldi	r22, 0x28	; 40
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <convert_to_binary_number_serialconnect>
			TWCR = 0b10100101;//フラグ下げ　開始 測定値受信
 59c:	f8 01       	movw	r30, r16
 59e:	d0 83       	st	Z, r29
			ISR_cnt = 1;
 5a0:	c0 93 1d 01 	sts	0x011D, r28	; 0x80011d <ISR_cnt>
 5a4:	c9 cf       	rjmp	.-110    	; 0x538 <main+0x4c>

000005a6 <convert_to_binary_number_serialconnect>:

#include <avr/io.h>
//#include "stdSerialCOM.h"
/***1.data 2.beffer 3.uniquechar ************************/
void convert_to_binary_number_serialconnect(unsigned char data, char *math,unsigned char data_name)
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	2c 97       	sbiw	r28, 0x0c	; 12
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
	char cnt;
	char ans;
	char buf[9] = "00000000";
 5be:	99 e0       	ldi	r25, 0x09	; 9
 5c0:	e3 e1       	ldi	r30, 0x13	; 19
 5c2:	f1 e0       	ldi	r31, 0x01	; 1
 5c4:	de 01       	movw	r26, r28
 5c6:	11 96       	adiw	r26, 0x01	; 1
 5c8:	01 90       	ld	r0, Z+
 5ca:	0d 92       	st	X+, r0
 5cc:	9a 95       	dec	r25
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <convert_to_binary_number_serialconnect+0x22>
	char j;
	char bin[3] = "0b";
 5d0:	20 e3       	ldi	r18, 0x30	; 48
 5d2:	32 e6       	ldi	r19, 0x62	; 98
 5d4:	3b 87       	std	Y+11, r19	; 0x0b
 5d6:	2a 87       	std	Y+10, r18	; 0x0a
 5d8:	1c 86       	std	Y+12, r1	; 0x0c
 5da:	8b 01       	movw	r16, r22
 5dc:	fb 01       	movw	r30, r22
 5de:	38 96       	adiw	r30, 0x08	; 8
 5e0:	db 01       	movw	r26, r22
	ans = 0;
	cnt = 0;
	for (j = 0; j <= 7; j++)
	{
		*(math+j) = 0;
 5e2:	1d 92       	st	X+, r1
	char buf[9] = "00000000";
	char j;
	char bin[3] = "0b";
	ans = 0;
	cnt = 0;
	for (j = 0; j <= 7; j++)
 5e4:	ae 17       	cp	r26, r30
 5e6:	bf 07       	cpc	r27, r31
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <convert_to_binary_number_serialconnect+0x3c>
	{
		*(math+j) = 0;
	}

	while (data != 0)//最後の演算が０or1
 5ea:	88 23       	and	r24, r24
 5ec:	59 f0       	breq	.+22     	; 0x604 <convert_to_binary_number_serialconnect+0x5e>
 5ee:	90 e0       	ldi	r25, 0x00	; 0
	{
		*(math + cnt) = data % 2;//余りを出す
 5f0:	db 01       	movw	r26, r22
 5f2:	a9 0f       	add	r26, r25
 5f4:	b1 1d       	adc	r27, r1
 5f6:	28 2f       	mov	r18, r24
 5f8:	21 70       	andi	r18, 0x01	; 1
 5fa:	2c 93       	st	X, r18
		//printf("bit[%d] %% 2=%d\n", cnt,*(math + cnt));
		data = data / 2;//実際に割る
 5fc:	86 95       	lsr	r24
		//printf("data / 2=%d\n", data);
		cnt++;//address加算
 5fe:	9f 5f       	subi	r25, 0xFF	; 255
	for (j = 0; j <= 7; j++)
	{
		*(math+j) = 0;
	}

	while (data != 0)//最後の演算が０or1
 600:	81 11       	cpse	r24, r1
 602:	f6 cf       	rjmp	.-20     	; 0x5f0 <convert_to_binary_number_serialconnect+0x4a>
		//printf("data / 2=%d\n", data);
		cnt++;//address加算

	}
	//*(math + cnt) = ans;
		while (!(UCSR0A & 0b00100000));
 604:	a0 ec       	ldi	r26, 0xC0	; 192
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	8c 91       	ld	r24, X
 60a:	85 ff       	sbrs	r24, 5
 60c:	fd cf       	rjmp	.-6      	; 0x608 <convert_to_binary_number_serialconnect+0x62>
		UDR0 = data_name;
 60e:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 612:	be 01       	movw	r22, r28
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	9b 01       	movw	r18, r22
	for (j = 0; j <= 7; j++)
	{
		*(buf + j) = *( math + (7 - j) ) + '0';
 61a:	82 91       	ld	r24, -Z
 61c:	80 5d       	subi	r24, 0xD0	; 208
 61e:	d9 01       	movw	r26, r18
 620:	8d 93       	st	X+, r24
 622:	9d 01       	movw	r18, r26

	}
	//*(math + cnt) = ans;
		while (!(UCSR0A & 0b00100000));
		UDR0 = data_name;
	for (j = 0; j <= 7; j++)
 624:	0e 17       	cp	r16, r30
 626:	1f 07       	cpc	r17, r31
 628:	c1 f7       	brne	.-16     	; 0x61a <convert_to_binary_number_serialconnect+0x74>
	{
		*(buf + j) = *( math + (7 - j) ) + '0';
		//printf("buf[%d] = math[%d]\n", j, 7 - j);
	}
	for (j = 0; j <= 1; j++) {
		while (!(UCSR0A & 0b00100000));
 62a:	e0 ec       	ldi	r30, 0xC0	; 192
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	85 ff       	sbrs	r24, 5
 632:	fd cf       	rjmp	.-6      	; 0x62e <convert_to_binary_number_serialconnect+0x88>
		UDR0 = *(bin + j);
 634:	8a 85       	ldd	r24, Y+10	; 0x0a
 636:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	{
		*(buf + j) = *( math + (7 - j) ) + '0';
		//printf("buf[%d] = math[%d]\n", j, 7 - j);
	}
	for (j = 0; j <= 1; j++) {
		while (!(UCSR0A & 0b00100000));
 63a:	e0 ec       	ldi	r30, 0xC0	; 192
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	85 ff       	sbrs	r24, 5
 642:	fd cf       	rjmp	.-6      	; 0x63e <convert_to_binary_number_serialconnect+0x98>
		UDR0 = *(bin + j);
 644:	8b 85       	ldd	r24, Y+11	; 0x0b
 646:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 64a:	ae 01       	movw	r20, r28
 64c:	47 5f       	subi	r20, 0xF7	; 247
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
		//printf("%c", *(bin + j));
	}
	for (j = 0; j <= 7; j++)
	{
		while (!(UCSR0A & 0b00100000));
 650:	e0 ec       	ldi	r30, 0xC0	; 192
 652:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *(buf + j);
 654:	26 ec       	ldi	r18, 0xC6	; 198
 656:	30 e0       	ldi	r19, 0x00	; 0
		UDR0 = *(bin + j);
		//printf("%c", *(bin + j));
	}
	for (j = 0; j <= 7; j++)
	{
		while (!(UCSR0A & 0b00100000));
 658:	80 81       	ld	r24, Z
 65a:	85 ff       	sbrs	r24, 5
 65c:	fd cf       	rjmp	.-6      	; 0x658 <convert_to_binary_number_serialconnect+0xb2>
		UDR0 = *(buf + j);
 65e:	db 01       	movw	r26, r22
 660:	8d 91       	ld	r24, X+
 662:	bd 01       	movw	r22, r26
 664:	d9 01       	movw	r26, r18
 666:	8c 93       	st	X, r24
	for (j = 0; j <= 1; j++) {
		while (!(UCSR0A & 0b00100000));
		UDR0 = *(bin + j);
		//printf("%c", *(bin + j));
	}
	for (j = 0; j <= 7; j++)
 668:	46 17       	cp	r20, r22
 66a:	57 07       	cpc	r21, r23
 66c:	a9 f7       	brne	.-22     	; 0x658 <convert_to_binary_number_serialconnect+0xb2>
		while (!(UCSR0A & 0b00100000));
		UDR0 = *(buf + j);
		//printf("%c", *(buf + j) );
	}
	
	while(!(UCSR0A & 0b00100000));
 66e:	e0 ec       	ldi	r30, 0xC0	; 192
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	85 ff       	sbrs	r24, 5
 676:	fd cf       	rjmp	.-6      	; 0x672 <convert_to_binary_number_serialconnect+0xcc>
	UDR0 = '\n';
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!(UCSR0A & 0b00100000));
 67e:	e0 ec       	ldi	r30, 0xC0	; 192
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	85 ff       	sbrs	r24, 5
 686:	fd cf       	rjmp	.-6      	; 0x682 <convert_to_binary_number_serialconnect+0xdc>
	UDR0 = '\r';
 688:	8d e0       	ldi	r24, 0x0D	; 13
 68a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

}
 68e:	2c 96       	adiw	r28, 0x0c	; 12
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	08 95       	ret

000006a4 <__udivmodqi4>:
 6a4:	99 1b       	sub	r25, r25
 6a6:	79 e0       	ldi	r23, 0x09	; 9
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <__udivmodqi4_ep>

000006aa <__udivmodqi4_loop>:
 6aa:	99 1f       	adc	r25, r25
 6ac:	96 17       	cp	r25, r22
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__udivmodqi4_ep>
 6b0:	96 1b       	sub	r25, r22

000006b2 <__udivmodqi4_ep>:
 6b2:	88 1f       	adc	r24, r24
 6b4:	7a 95       	dec	r23
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <__udivmodqi4_loop>
 6b8:	80 95       	com	r24
 6ba:	08 95       	ret

000006bc <__muluhisi3>:
 6bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__umulhisi3>
 6c0:	a5 9f       	mul	r26, r21
 6c2:	90 0d       	add	r25, r0
 6c4:	b4 9f       	mul	r27, r20
 6c6:	90 0d       	add	r25, r0
 6c8:	a4 9f       	mul	r26, r20
 6ca:	80 0d       	add	r24, r0
 6cc:	91 1d       	adc	r25, r1
 6ce:	11 24       	eor	r1, r1
 6d0:	08 95       	ret

000006d2 <__mulshisi3>:
 6d2:	b7 ff       	sbrs	r27, 7
 6d4:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__muluhisi3>

000006d8 <__mulohisi3>:
 6d8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__muluhisi3>
 6dc:	82 1b       	sub	r24, r18
 6de:	93 0b       	sbc	r25, r19
 6e0:	08 95       	ret

000006e2 <__umulhisi3>:
 6e2:	a2 9f       	mul	r26, r18
 6e4:	b0 01       	movw	r22, r0
 6e6:	b3 9f       	mul	r27, r19
 6e8:	c0 01       	movw	r24, r0
 6ea:	a3 9f       	mul	r26, r19
 6ec:	70 0d       	add	r23, r0
 6ee:	81 1d       	adc	r24, r1
 6f0:	11 24       	eor	r1, r1
 6f2:	91 1d       	adc	r25, r1
 6f4:	b2 9f       	mul	r27, r18
 6f6:	70 0d       	add	r23, r0
 6f8:	81 1d       	adc	r24, r1
 6fa:	11 24       	eor	r1, r1
 6fc:	91 1d       	adc	r25, r1
 6fe:	08 95       	ret

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
